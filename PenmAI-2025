<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Graphical Calculator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .calculator-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1rem;
        }
        .btn {
            transition: all 0.2s ease-in-out;
        }
        .btn:hover {
            transform: scale(1.05);
        }
        .btn:active {
            transform: scale(0.95);
        }
        .btn-span-2 {
            grid-column: span 2;
        }
        /* Custom scrollbar for history */
        #history-content::-webkit-scrollbar {
            width: 6px;
        }
        #history-content::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 10px;
        }
        #history-content::-webkit-scrollbar-thumb {
            background: #94a3b8;
            border-radius: 10px;
        }
        #history-content::-webkit-scrollbar-thumb:hover {
            background: #64748b;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-4xl mx-auto flex flex-col lg:flex-row gap-8">
        <!-- Calculator -->
        <div class="w-full max-w-sm mx-auto bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-6">
            <div class="display bg-gray-100 dark:bg-gray-700 rounded-lg p-5 mb-6 text-right">
                <div id="expression" class="text-gray-500 dark:text-gray-400 text-xl h-7 truncate"></div>
                <div id="result" class="text-gray-900 dark:text-white text-5xl font-bold truncate">0</div>
            </div>

            <div class="calculator-grid">
                <!-- Row 1 -->
                <button onclick="clearAll()" class="btn btn-span-2 bg-rose-500 hover:bg-rose-600 text-white text-2xl font-semibold rounded-xl py-4">AC</button>
                <button onclick="deleteLast()" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">DEL</button>
                <button onclick="appendOperator('/')" class="btn bg-orange-500 hover:bg-orange-600 text-white text-2xl font-bold rounded-xl py-4">÷</button>

                <!-- Row 2 -->
                <button onclick="appendNumber('7')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">7</button>
                <button onclick="appendNumber('8')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">8</button>
                <button onclick="appendNumber('9')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">9</button>
                <button onclick="appendOperator('*')" class="btn bg-orange-500 hover:bg-orange-600 text-white text-2xl font-bold rounded-xl py-4">×</button>

                <!-- Row 3 -->
                <button onclick="appendNumber('4')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">4</button>
                <button onclick="appendNumber('5')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">5</button>
                <button onclick="appendNumber('6')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">6</button>
                <button onclick="appendOperator('-')" class="btn bg-orange-500 hover:bg-orange-600 text-white text-2xl font-bold rounded-xl py-4">-</button>

                <!-- Row 4 -->
                <button onclick="appendNumber('1')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">1</button>
                <button onclick="appendNumber('2')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">2</button>
                <button onclick="appendNumber('3')" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">3</button>
                <button onclick="appendOperator('+')" class="btn bg-orange-500 hover:bg-orange-600 text-white text-2xl font-bold rounded-xl py-4">+</button>

                <!-- Row 5 -->
                <button onclick="appendNumber('0')" class="btn btn-span-2 bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">0</button>
                <button onclick="appendDecimal()" class="btn bg-gray-200 dark:bg-gray-600 hover:bg-gray-300 dark:hover:bg-gray-500 text-gray-900 dark:text-white text-2xl font-semibold rounded-xl py-4">.</button>
                <button onclick="calculate()" class="btn bg-emerald-500 hover:bg-emerald-600 text-white text-2xl font-bold rounded-xl py-4">=</button>
            </div>
        </div>

        <!-- History Panel -->
        <div class="w-full lg:w-1/3 bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-6 flex flex-col">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">History</h2>
                <button onclick="clearHistory()" class="text-sm font-medium text-rose-500 hover:text-rose-700 dark:hover:text-rose-400">Clear</button>
            </div>
            <div id="history-content" class="flex-grow overflow-y-auto space-y-3 pr-2">
                <!-- History items will be injected here -->
                <p id="no-history" class="text-gray-500 dark:text-gray-400 text-center mt-8">No calculations yet.</p>
            </div>
        </div>
    </div>


    <script>
        const resultEl = document.getElementById('result');
        const expressionEl = document.getElementById('expression');
        const historyContentEl = document.getElementById('history-content');
        const noHistoryEl = document.getElementById('no-history');

        let currentInput = '0';
        let currentExpression = '';
        let history = [];

        function updateDisplay() {
            resultEl.textContent = formatNumber(currentInput);
            expressionEl.textContent = currentExpression.replace(/\*/g, '×').replace(/\//g, '÷');
        }
        
        function formatNumber(numStr) {
            if (numStr.includes('Infinity') || numStr.includes('NaN')) return "Error";
            const [integerPart, decimalPart] = numStr.split('.');
            const formattedInteger = parseFloat(integerPart).toLocaleString('en-US');
            return decimalPart !== undefined ? `${formattedInteger}.${decimalPart}` : formattedInteger;
        }

        function appendNumber(number) {
            if (currentInput === '0' || currentInput === 'Error') {
                currentInput = number;
            } else {
                currentInput += number;
            }
            updateDisplay();
        }

        function appendOperator(operator) {
            if (currentInput === 'Error') return;
            // Prevent multiple operators in a row
            if (currentExpression.slice(-1) === ' ' && currentInput === '') return;
            
            if (currentInput !== '') {
                 currentExpression += currentInput + ' ' + operator + ' ';
            } else {
                // Allows changing the operator
                currentExpression = currentExpression.slice(0, -3) + ' ' + operator + ' ';
            }
            currentInput = '';
            updateDisplay();
        }
        
        function appendDecimal() {
            if (currentInput.includes('.')) return;
            if (currentInput === '' || currentInput === 'Error') {
                currentInput = '0.';
            } else {
                currentInput += '.';
            }
            updateDisplay();
        }

        function calculate() {
            if (currentExpression === '' || currentInput === '' || currentInput === 'Error') return;
            
            const finalExpression = (currentExpression + currentInput).replace(/×/g, '*').replace(/÷/g, '/');
            try {
                // Using Function constructor for safe evaluation
                const result = new Function('return ' + finalExpression)();
                
                if (!isFinite(result)) {
                    throw new Error("Division by zero");
                }

                addToHistory(finalExpression, result);

                currentInput = String(result);
                currentExpression = '';
            } catch (error) {
                currentInput = 'Error';
                currentExpression = '';
                console.error("Calculation Error:", error);
            }
            updateDisplay();
        }

        function clearAll() {
            currentInput = '0';
            currentExpression = '';
            updateDisplay();
        }

        function deleteLast() {
            if (currentInput === 'Error') {
                clearAll();
                return;
            }
            if (currentInput.length > 1) {
                currentInput = currentInput.slice(0, -1);
            } else {
                currentInput = '0';
            }
            updateDisplay();
        }

        function addToHistory(expression, result) {
            const calculation = {
                expression: expression.replace(/\*/g, '×').replace(/\//g, '÷'),
                result: formatNumber(String(result))
            };
            history.unshift(calculation); // Add to the beginning
            if (history.length > 20) { // Keep history size manageable
                history.pop();
            }
            updateHistoryUI();
        }
        
        function updateHistoryUI() {
            if (noHistoryEl) noHistoryEl.style.display = history.length === 0 ? 'block' : 'none';
            
            historyContentEl.innerHTML = history.map(calc => `
                <div class="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg text-right">
                    <div class="text-gray-500 dark:text-gray-400 text-sm truncate">${calc.expression}</div>
                    <div class="text-gray-900 dark:text-white text-lg font-semibold">${calc.result}</div>
                </div>
            `).join('');
        }

        function clearHistory() {
            history = [];
            updateHistoryUI();
        }
        
        // Keyboard support
        document.addEventListener('keydown', (e) => {
            if (e.key >= 0 && e.key <= 9) appendNumber(e.key);
            if (e.key === '.') appendDecimal();
            if (e.key === '+' || e.key === '-' || e.key === '*' || e.key === '/') appendOperator(e.key);
            if (e.key === 'Enter' || e.key === '=') {
                e.preventDefault(); // Prevent form submission if inside one
                calculate();
            }
            if (e.key === 'Backspace') deleteLast();
            if (e.key === 'Escape') clearAll();
        });


        // Initialize
        updateDisplay();
        updateHistoryUI();

    </script>
</body>
</html>
